import{B as K,m as c}from"./DQgDrh1u.js";import{b as l,a as U}from"./Cm96zG12.js";import{useAnalytics as z}from"./CKiNWUy9.js";import{useConversations as E}from"./DwlbBAgr.js";import{useOrders as G}from"./CtDVyml8.js";const J=K("agents",{state:()=>({agents:[],currentAgent:null,isLoading:!1,isCreating:!1,error:null,lastFetch:null}),getters:{activeAgents:e=>e.agents.filter(s=>s.isActive),inactiveAgents:e=>e.agents.filter(s=>!s.isActive),totalAgents:e=>e.agents.length,activeCount:e=>e.agents.filter(s=>s.isActive).length,getAgentById:e=>s=>e.agents.find(o=>o.id===s),getAgentsByType:e=>s=>e.agents.filter(o=>o.type===s),needsRefresh:e=>{if(!e.lastFetch)return!0;const s=new Date(Date.now()-900*1e3);return e.lastFetch<s}},actions:{async fetchAgents(e=!1){if(!e&&!this.needsRefresh)return;if(!U().isAuthenticated){this.error="Utilisateur non authentifié";return}this.isLoading=!0,this.error=null;try{console.log("🤖 [Agents] Chargement agents via API...");const a=await l().agents.list();console.log("🤖 [Agents] Réponse API:",a),a.success&&a.data?(this.agents=a.data,this.lastFetch=new Date,this.error=null,console.log("✅ [Agents] Agents chargés:",a.data.length)):(this.error=a.error||"Erreur lors du chargement des agents",console.error("❌ [Agents] Erreur:",this.error))}catch(o){this.error=o.message||"Erreur lors du chargement des agents",console.error("❌ [Agents] Exception:",o)}finally{this.isLoading=!1}},async createAgent(e){this.isCreating=!0,this.error=null;try{console.log("🤖 [Agents] Création agent...");const o=await l().agents.create(e);return o.success&&o.data?(this.agents.unshift(o.data),console.log("✅ [Agents] Agent créé"),o.data):(this.error=o.error||"Erreur lors de la création de l'agent",null)}catch(s){return this.error=s.message||"Erreur lors de la création de l'agent",console.error("❌ [Agents] Exception:",s),null}finally{this.isCreating=!1}},async updateAgent(e,s){try{console.log("🤖 [Agents] Mise à jour agent:",e);const a=await l().agents.update(e,s);if(a.success&&a.data){const u=this.agents.findIndex(A=>A.id===e);return u!==-1&&(this.agents[u]={...this.agents[u],...a.data}),this.currentAgent?.id===e&&(this.currentAgent={...this.currentAgent,...a.data}),console.log("✅ [Agents] Agent mis à jour"),!0}else return this.error=a.error||"Erreur lors de la mise à jour de l'agent",!1}catch(o){return this.error=o.message||"Erreur lors de la mise à jour de l'agent",console.error("❌ [Agents] Exception:",o),!1}},async deleteAgent(e){try{console.log("🤖 [Agents] Suppression agent:",e);const o=await l().agents.delete(e);if(o.success){const a=this.agents.findIndex(u=>u.id===e);return a!==-1&&this.agents.splice(a,1),this.currentAgent?.id===e&&(this.currentAgent=null),console.log("✅ [Agents] Agent supprimé"),!0}else return this.error=o.error||"Erreur lors de la suppression de l'agent",!1}catch(s){return this.error=s.message||"Erreur lors de la suppression de l'agent",console.error("❌ [Agents] Exception:",s),!1}},async toggleAgent(e,s){return await this.updateAgent(e,{isActive:s})},setCurrentAgent(e){this.currentAgent=e},clearError(){this.error=null},clearData(){this.agents=[],this.currentAgent=null,this.error=null,this.lastFetch=null},getAgentTypes(){return[{value:"conversion",label:"Vendeur Conversion Expert"},{value:"product",label:"Conseiller Produit Avancé"},{value:"support",label:"Support-Vente"},{value:"premium",label:"Vendeur Premium/Luxe"},{value:"flash",label:"Vendeur Flash/Promotions"},{value:"custom",label:"Agent Personnalisable"}]},getPersonalities(){return[{value:"friendly",label:"Amical"},{value:"professional",label:"Professionnel"},{value:"expert",label:"Expert"},{value:"casual",label:"Décontracté"},{value:"premium",label:"Premium"},{value:"enthusiastic",label:"Enthousiaste"}]}}}),h=()=>{const e=J();return{agents:c(()=>e.agents),currentAgent:c(()=>e.currentAgent),isLoading:c(()=>e.isLoading),isCreating:c(()=>e.isCreating),error:c(()=>e.error),activeAgents:c(()=>e.activeAgents),inactiveAgents:c(()=>e.inactiveAgents),totalAgents:c(()=>e.totalAgents),activeCount:c(()=>e.activeCount),fetchAgents:e.fetchAgents,createAgent:e.createAgent,updateAgent:e.updateAgent,deleteAgent:e.deleteAgent,toggleAgent:e.toggleAgent,setCurrentAgent:e.setCurrentAgent,clearError:e.clearError,clearData:e.clearData,getAgentTypes:e.getAgentTypes,getPersonalities:e.getPersonalities,getAgentById:e.getAgentById,getAgentsByType:e.getAgentsByType}},Z=()=>{const{fetchConversations:e,conversations:s,isLoading:o,error:a}=E(),{fetchOrders:u,orders:A,isLoading:C,error:R}=G(),{fetchAgents:S,agents:P,isLoading:b,error:x}=h(),{fetchAnalytics:L,data:k,isLoading:T,error:I}=z(),v=async()=>(console.log("📞 [DB] Récupération conversations via store..."),await e(),s.value||[]),f=async()=>(console.log("🛒 [DB] Récupération commandes via store..."),await u(),A.value||[]),y=async()=>(console.log("🤖 [DB] Récupération agents via store..."),await S(),P.value||[]),D=async()=>(console.log("📊 [DB] Récupération analytics via store..."),await L(),k.value||{totalConversations:0,activeConversations:0,completedConversations:0,completedOrders:0,totalRevenue:0,conversionRate:0,averageOrderValue:0,conversationsByDay:[],revenueByDay:[],topProducts:[]}),m=async()=>{console.log("📚 [DB] Récupération knowledge base via API...");try{const r=await l().knowledgeBase.list();return r.success&&r.data?(console.log("✅ [DB] Documents récupérés:",r.data.length),r.data):(console.error("❌ [DB] Erreur knowledge base:",r.error),[])}catch(t){return console.error("❌ [DB] Exception knowledge base:",t),[]}},O=async t=>{console.log("🏪 [DB] Récupération shop via API...");try{const n=await l().shops.get(t);return n.success&&n.data?(console.log("✅ [DB] Shop récupéré"),n.data):(console.error("❌ [DB] Erreur shop:",n.error),null)}catch(r){return console.error("❌ [DB] Exception shop:",r),null}},$=async(t,r)=>{console.log(`➕ [DB] Création ${t} via API:`,r);try{const n=l();switch(t){case"agents":return await h().createAgent(r);case"products":const g=await n.products.create(r);return g.success?g.data:null;case"conversations":return await E().createConversation(r);default:return console.error("❌ [DB] Table non supportée:",t),null}}catch(n){return console.error(`❌ [DB] Erreur création ${t}:`,n),null}},j=async(t,r,n)=>{console.log(`✏️ [DB] Mise à jour ${t}/${r} via API:`,n);try{const i=l();switch(t){case"agents":return await h().updateAgent(r,n)?n:null;case"products":const d=await i.products.update(r,n);return d.success?d.data:null;case"shops":const B=await i.shops.update(r,n);return B.success?B.data:null;default:return console.error("❌ [DB] Table non supportée:",t),null}}catch(i){return console.error(`❌ [DB] Erreur mise à jour ${t}:`,i),null}},F=async(t,r)=>{console.log(`🗑️ [DB] Suppression ${t}/${r} via API`);try{const n=l();switch(t){case"agents":return await h().deleteAgent(r);case"products":return(await n.products.delete(r)).success;case"knowledge_base":return(await n.knowledgeBase.delete(r)).success;default:return console.error("❌ [DB] Table non supportée:",t),!1}}catch(n){return console.error(`❌ [DB] Erreur suppression ${t}:`,n),!1}},V=async(t,r={})=>(await w(t,r)).length,w=async(t,r={})=>{switch(t){case"conversations":return await v();case"orders":return await f();case"agents":return await y();case"knowledge_base":return await m();default:return console.error("❌ [DB] Table non supportée:",t),[]}},q=async()=>{console.log("📈 [DB] Calcul des statistiques via stores...");try{const t=await D();if(t)return console.log("✅ [DB] Statistiques récupérées depuis analytics"),{totalConversations:t.totalConversations,totalOrders:t.completedOrders,totalAgents:t.totalConversations>0?1:0,totalRevenue:t.totalRevenue,conversionRate:t.conversionRate};const[r,n,i]=await Promise.all([v(),f(),y()]),g={totalConversations:r.length,totalOrders:n.length,totalAgents:i.length,totalRevenue:n.reduce((p,d)=>p+(d.totalAmount||0),0),conversionRate:r.length>0?n.length/r.length*100:0};return console.log("✅ [DB] Statistiques calculées:",g),g}catch(t){return console.error("❌ [DB] Erreur calcul statistiques:",t),{totalConversations:0,totalOrders:0,totalAgents:0,totalRevenue:0,conversionRate:0}}},M=async()=>{console.log("🏥 [DB] Health check API...");try{const r=await l().utils.healthCheck();return r.success?(console.log("✅ [DB] API en bonne santé"),!0):(console.error("❌ [DB] API non disponible:",r.error),!1)}catch(t){return console.error("❌ [DB] Exception health check:",t),!1}},_=c(()=>o.value||C.value||b.value||T.value),H=c(()=>a.value||R.value||x.value||I.value);return{getConversations:v,getOrders:f,getAgents:y,getAnalytics:D,getKnowledgeBase:m,getShop:O,getStats:q,create:$,update:j,remove:F,count:V,getData:w,healthCheck:M,isLoading:_,lastError:H}};export{Z as u};
