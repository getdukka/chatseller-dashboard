// composables/useKnowledgeBase.ts - CORRECTION TYPESCRIPT D√âFINITIVE
import { ref, computed } from 'vue'
import { useAuthStore } from '~/stores/auth'
import { useSupabase } from './useSupabase'

// ‚úÖ TYPES PARFAITEMENT D√âFINIS
export interface KnowledgeBaseDocument {
  id: string
  title: string
  content: string
  contentType: 'manual' | 'file' | 'url' | 'website'
  sourceFile?: string
  sourceUrl?: string
  tags: string[]
  isActive: boolean
  shopId: string
  linkedAgents?: string[]
  createdAt: string
  updatedAt: string
  metadata?: {
    fileSize?: number
    fileType?: string
    wordCount?: number
    lastProcessed?: string
    storagePath?: string
    originalFileName?: string
  }
}

export interface CreateKnowledgeBaseData {
  title: string
  content: string
  contentType: KnowledgeBaseDocument['contentType']
  sourceFile?: string
  sourceUrl?: string
  tags?: string[]
  isActive?: boolean
  metadata?: Partial<KnowledgeBaseDocument['metadata']>
}

export interface UpdateKnowledgeBaseData extends Partial<CreateKnowledgeBaseData> {}

// ‚úÖ TYPES DE RETOUR FIXES - SOLUTION D√âFINITIVE
export interface ApiSuccessResponse<T = any> {
  success: true
  data: T
}

export interface ApiErrorResponse {
  success: false
  error: string
}

export type ApiResponse<T = any> = ApiSuccessResponse<T> | ApiErrorResponse

interface KnowledgeBaseResponse {
  success: boolean
  data: KnowledgeBaseDocument[]
  meta: {
    total: number
    activeCount: number
  }
}

// ‚úÖ COMPOSABLE PRINCIPAL AVEC CORRECTION TYPESCRIPT D√âFINITIVE
export const useKnowledgeBase = () => {
  const authStore = useAuthStore()
  const config = useRuntimeConfig()

  // ‚úÖ STATE R√âACTIF
  const documents = ref<KnowledgeBaseDocument[]>([])
  const loading = ref(false)
  const saving = ref(false)
  const error = ref<string | null>(null)
  const uploadProgress = ref(0)

  // ‚úÖ GETTERS
  const activeDocuments = computed(() => 
    documents.value.filter(doc => doc.isActive)
  )

  const documentsByType = computed(() => {
    return documents.value.reduce((acc, doc) => {
      if (!acc[doc.contentType]) {
        acc[doc.contentType] = []
      }
      acc[doc.contentType].push(doc)
      return acc
    }, {} as Record<string, KnowledgeBaseDocument[]>)
  })

  const totalWordCount = computed(() => 
    documents.value.reduce((total, doc) => total + (doc.metadata?.wordCount || 0), 0)
  )

  // ‚úÖ HELPER: Headers avec authentification
  const getAuthHeaders = () => {
    if (!authStore.token) {
      console.warn('‚ö†Ô∏è [useKnowledgeBase] Pas de token disponible, mode d√©veloppement')
      return {
        'Content-Type': 'application/json'
      }
    }
    
    return {
      'Authorization': `Bearer ${authStore.token}`,
      'Content-Type': 'application/json'
    }
  }

  // ‚úÖ HELPER: Gestion des erreurs API
  const handleApiError = (err: any, defaultMessage: string): ApiErrorResponse => {
    console.error('‚ùå KB API Error:', err)
    
    let errorMessage = defaultMessage
    
    if (err.data?.error && typeof err.data.error === 'string') {
      errorMessage = err.data.error
    } else if (err.message && typeof err.message === 'string') {
      errorMessage = err.message
    } else if (err.statusText && typeof err.statusText === 'string') {
      errorMessage = `Erreur ${err.status || 'API'}: ${err.statusText}`
    }
    
    error.value = errorMessage
    return { success: false, error: errorMessage }
  }

  // ‚úÖ NOUVEAU: GESTION SUPABASE STORAGE
  const uploadFileToStorage = async (file: File, shopId: string): Promise<{ success: boolean; data?: { path: string; url: string }; error?: string }> => {
    try {
      const supabase = useSupabase()
      
      // Cr√©er un nom de fichier unique
      const timestamp = Date.now()
      const fileExtension = file.name.split('.').pop()
      const sanitizedFileName = file.name.replace(/[^a-zA-Z0-9.-]/g, '_')
      const fileName = `${timestamp}_${sanitizedFileName}`
      const filePath = `knowledge-base/${shopId}/${fileName}`
      
      console.log('üîÑ Upload vers Supabase Storage:', filePath)
      
      // Upload le fichier
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from('chatseller-files')
        .upload(filePath, file, {
          cacheControl: '3600',
          upsert: false
        })
      
      if (uploadError) {
        throw new Error(`Erreur upload: ${uploadError.message}`)
      }
      
      // Obtenir l'URL publique
      const { data: urlData } = supabase.storage
        .from('chatseller-files')
        .getPublicUrl(filePath)
      
      return {
        success: true,
        data: {
          path: filePath,
          url: urlData.publicUrl
        }
      }
      
    } catch (err: any) {
      console.error('‚ùå Erreur upload Supabase Storage:', err)
      return {
        success: false,
        error: err.message || 'Erreur lors de l\'upload du fichier'
      }
    }
  }

  // ‚úÖ NOUVEAU: SUPPRIMER FICHIER DU STORAGE
  const deleteFileFromStorage = async (storagePath: string): Promise<void> => {
    try {
      const supabase = useSupabase()
      
      const { error } = await supabase.storage
        .from('chatseller-files')
        .remove([storagePath])
      
      if (error) {
        console.warn('‚ö†Ô∏è Erreur suppression fichier storage:', error)
      } else {
        console.log('‚úÖ Fichier supprim√© du storage:', storagePath)
      }
    } catch (err) {
      console.warn('‚ö†Ô∏è Erreur suppression storage:', err)
    }
  }

  // ‚úÖ R√âCUP√âRER TOUS LES DOCUMENTS
  const fetchDocuments = async (): Promise<ApiResponse<KnowledgeBaseDocument[]>> => {
    loading.value = true
    error.value = null

    try {
      console.log('üîç [useKnowledgeBase] R√©cup√©ration des documents...')
      
      // ‚úÖ V√©rifier si on a un token
      if (!authStore.token) {
        console.log('‚ö†Ô∏è [useKnowledgeBase] Pas de token, utilisation donn√©es mock√©es')
        
        // ‚úÖ DONN√âES MOCK√âES √âTENDUES
        const mockDocuments: KnowledgeBaseDocument[] = [
          {
            id: 'kb_001',
            title: 'Catalogue Produits 2024',
            content: 'Notre catalogue comprend une large gamme de produits innovants pour r√©pondre √† tous vos besoins. Nous proposons des solutions technologiques de pointe, des accessoires de qualit√© premium, et des services personnalis√©s. Nos produits sont con√ßus avec les derni√®res technologies et respectent les normes environnementales les plus strictes.',
            contentType: 'file',
            sourceFile: 'catalogue-2024.pdf',
            tags: ['produits', 'catalogue', '2024', 'technologie'],
            isActive: true,
            shopId: authStore.userShopId || 'mock-shop',
            linkedAgents: [],
            createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
            updatedAt: new Date().toISOString(),
            metadata: {
              fileSize: 2048000,
              fileType: 'application/pdf',
              wordCount: 1250,
              lastProcessed: new Date().toISOString(),
              originalFileName: 'catalogue-2024.pdf',
              storagePath: 'knowledge-base/mock-shop/catalogue-2024.pdf'
            }
          },
          {
            id: 'kb_002',
            title: 'FAQ Support Client',
            content: `Questions fr√©quemment pos√©es par nos clients :

Q: Quels sont vos d√©lais de livraison ?
R: Livraison sous 24-48h en France m√©tropolitaine pour les commandes pass√©es avant 16h.

Q: Acceptez-vous les retours ?
R: Oui, retours gratuits sous 30 jours dans l'emballage d'origine.

Q: Quelle est la garantie ?
R: Garantie 2 ans sur tous nos produits avec support technique 7j/7.

Q: Modes de paiement accept√©s ?
R: CB, PayPal, virement, paiement en 3x sans frais.

Q: Support technique disponible ?
R: Notre √©quipe technique est disponible du lundi au vendredi de 9h √† 18h.`,
            contentType: 'manual',
            tags: ['faq', 'support', 'client', 'livraison', 'garantie'],
            isActive: true,
            shopId: authStore.userShopId || 'mock-shop',
            linkedAgents: [],
            createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),
            updatedAt: new Date().toISOString(),
            metadata: {
              wordCount: 156,
              lastProcessed: new Date().toISOString()
            }
          },
          {
            id: 'kb_003',
            title: 'Politique de Prix et Promotions',
            content: `Notre politique tarifaire et promotionnelle :

PRIX COMP√âTITIFS
- Garantie du meilleur prix
- Prix d√©gressifs selon quantit√©
- Tarifs pr√©f√©rentiels B2B

PROMOTIONS R√âGULI√àRES
- 20% de r√©duction pour les nouveaux clients
- Programme de fid√©lit√© avec points
- Offres saisonni√®res exclusives
- Code promo newsletter

MODALIT√âS DE PAIEMENT
- Paiement s√©curis√© SSL
- Paiement en 3x sans frais (>100‚Ç¨)
- Facturation B2B avec conditions NET 30
- Remises de quantit√© automatiques

GARANTIES
- Satisfait ou rembours√© 30 jours
- Garantie prix pendant 7 jours apr√®s achat
- Service apr√®s-vente premium`,
            contentType: 'manual',
            tags: ['prix', 'promotions', 'paiement', 'fid√©lit√©', 'garantie'],
            isActive: true,
            shopId: authStore.userShopId || 'mock-shop',
            linkedAgents: [],
            createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),
            updatedAt: new Date().toISOString(),
            metadata: {
              wordCount: 145,
              lastProcessed: new Date().toISOString()
            }
          }
        ]
        
        documents.value = mockDocuments
        console.log(`‚úÖ [useKnowledgeBase] ${mockDocuments.length} documents mock√©s charg√©s`)
        return { success: true, data: mockDocuments }
      }
      
      // ‚úÖ APPEL API NORMAL
      const response = await $fetch('/api/v1/knowledge-base', {
        baseURL: config.public.apiBaseUrl,
        headers: getAuthHeaders()
      }) as KnowledgeBaseResponse

      if (response.success) {
        documents.value = response.data
        console.log(`‚úÖ [useKnowledgeBase] ${response.data.length} documents r√©cup√©r√©s`)
        return { success: true, data: response.data }
      } else {
        throw new Error('R√©ponse API invalide')
      }

    } catch (err: any) {
      console.error('‚ùå [useKnowledgeBase] Erreur API, tentative fallback...', err)
      
      // ‚úÖ FALLBACK EN CAS D'ERREUR API
      const fallbackDocuments: KnowledgeBaseDocument[] = [
        {
          id: 'fallback_kb_1',
          title: 'Document de Test',
          content: 'Contenu de test en cas d\'erreur API. Ce document permet de tester les fonctionnalit√©s m√™me sans connexion au serveur.',
          contentType: 'manual',
          tags: ['fallback', 'test'],
          isActive: true,
          shopId: authStore.userShopId || 'fallback-shop',
          linkedAgents: [],
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
          metadata: { wordCount: 20 }
        }
      ]
      
      documents.value = fallbackDocuments
      console.log('‚úÖ [useKnowledgeBase] Donn√©es de fallback charg√©es')
      return { success: true, data: fallbackDocuments }
      
    } finally {
      loading.value = false
    }
  }

  // ‚úÖ CR√âER UN DOCUMENT
  const createDocument = async (data: CreateKnowledgeBaseData): Promise<ApiResponse<KnowledgeBaseDocument>> => {
    saving.value = true
    error.value = null

    try {
      console.log('üèóÔ∏è Cr√©ation d\'un document KB:', data.title)
      
      // ‚úÖ MODE D√âVELOPPEMENT - CR√âER EN LOCAL
      if (!authStore.token) {
        await new Promise(resolve => setTimeout(resolve, 1000))
        
        const mockDoc: KnowledgeBaseDocument = {
          id: Date.now().toString(),
          title: data.title,
          content: data.content,
          contentType: data.contentType,
          sourceFile: data.sourceFile,
          sourceUrl: data.sourceUrl,
          tags: data.tags || [],
          isActive: data.isActive ?? true,
          shopId: authStore.userShopId || 'mock-shop',
          linkedAgents: [],
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
          metadata: {
            wordCount: data.content.split(' ').length,
            lastProcessed: new Date().toISOString(),
            ...data.metadata
          }
        }
        
        documents.value.unshift(mockDoc)
        console.log(`‚úÖ Document KB cr√©√© (mock): ${mockDoc.id}`)
        return { success: true, data: mockDoc }
      }
      
      const response = await $fetch('/api/v1/knowledge-base', {
        method: 'POST',
        baseURL: config.public.apiBaseUrl,
        headers: getAuthHeaders(),
        body: {
          ...data,
          shopId: authStore.userShopId,
          isActive: data.isActive ?? true,
          tags: data.tags || []
        }
      }) as { success: boolean; data: KnowledgeBaseDocument }

      if (response.success) {
        documents.value.unshift(response.data)
        console.log(`‚úÖ Document KB cr√©√©: ${response.data.id}`)
        return { success: true, data: response.data }
      } else {
        throw new Error('R√©ponse API invalide')
      }

    } catch (err: any) {
      return handleApiError(err, 'Erreur lors de la cr√©ation du document')
    } finally {
      saving.value = false
    }
  }

  // ‚úÖ METTRE √Ä JOUR UN DOCUMENT
  const updateDocument = async (id: string, data: UpdateKnowledgeBaseData): Promise<ApiResponse<KnowledgeBaseDocument>> => {
    saving.value = true
    error.value = null

    try {
      console.log('üìù Modification du document KB:', id)
      
      // ‚úÖ MODE D√âVELOPPEMENT - MODIFIER EN LOCAL
      if (!authStore.token) {
        await new Promise(resolve => setTimeout(resolve, 500))
        
        const index = documents.value.findIndex(doc => doc.id === id)
        if (index !== -1) {
          const updatedDoc = {
            ...documents.value[index],
            ...data,
            updatedAt: new Date().toISOString(),
            metadata: {
              ...documents.value[index].metadata,
              ...data.metadata,
              wordCount: data.content ? data.content.split(' ').length : documents.value[index].metadata?.wordCount,
              lastProcessed: new Date().toISOString()
            }
          }
          documents.value[index] = updatedDoc
          console.log(`‚úÖ Document KB modifi√© (mock): ${id}`)
          return { success: true, data: updatedDoc }
        }
        throw new Error('Document non trouv√©')
      }
      
      const response = await $fetch(`/api/v1/knowledge-base/${id}`, {
        method: 'PUT',
        baseURL: config.public.apiBaseUrl,
        headers: getAuthHeaders(),
        body: data
      }) as { success: boolean; data: KnowledgeBaseDocument }

      if (response.success) {
        const index = documents.value.findIndex(doc => doc.id === id)
        if (index !== -1) {
          documents.value[index] = { ...documents.value[index], ...response.data }
        }
        console.log(`‚úÖ Document KB modifi√©: ${id}`)
        return { success: true, data: response.data }
      } else {
        throw new Error('R√©ponse API invalide')
      }

    } catch (err: any) {
      return handleApiError(err, 'Erreur lors de la modification du document')
    } finally {
      saving.value = false
    }
  }

  // ‚úÖ SUPPRIMER UN DOCUMENT - AVEC SUPPRESSION FICHIER
  const deleteDocument = async (id: string): Promise<ApiResponse<null>> => {
    saving.value = true
    error.value = null

    try {
      console.log('üóëÔ∏è Suppression du document KB:', id)
      
      // Trouver le document pour r√©cup√©rer le chemin de stockage
      const docToDelete = documents.value.find(doc => doc.id === id)
      
      // ‚úÖ MODE D√âVELOPPEMENT - SUPPRIMER EN LOCAL
      if (!authStore.token) {
        await new Promise(resolve => setTimeout(resolve, 500))
        
        // Supprimer du storage si fichier
        if (docToDelete?.metadata?.storagePath) {
          await deleteFileFromStorage(docToDelete.metadata.storagePath)
        }
        
        documents.value = documents.value.filter(doc => doc.id !== id)
        console.log(`‚úÖ Document KB supprim√© (mock): ${id}`)
        return { success: true, data: null }
      }
      
      const response = await $fetch(`/api/v1/knowledge-base/${id}`, {
        method: 'DELETE',
        baseURL: config.public.apiBaseUrl,
        headers: getAuthHeaders()
      }) as { success: boolean }

      if (response.success) {
        // Supprimer du storage si fichier
        if (docToDelete?.metadata?.storagePath) {
          await deleteFileFromStorage(docToDelete.metadata.storagePath)
        }
        
        documents.value = documents.value.filter(doc => doc.id !== id)
        console.log(`‚úÖ Document KB supprim√©: ${id}`)
        return { success: true, data: null }
      } else {
        throw new Error('R√©ponse API invalide')
      }

    } catch (err: any) {
      return handleApiError(err, 'Erreur lors de la suppression du document')
    } finally {
      saving.value = false
    }
  }

  // ‚úÖ ACTIVER/D√âSACTIVER UN DOCUMENT
  const toggleDocumentStatus = async (id: string, isActive: boolean): Promise<ApiResponse<null>> => {
    saving.value = true
    error.value = null

    try {
      console.log(`üîÑ ${isActive ? 'Activation' : 'D√©sactivation'} du document KB:`, id)
      
      // ‚úÖ MODE D√âVELOPPEMENT - MODIFIER EN LOCAL
      if (!authStore.token) {
        await new Promise(resolve => setTimeout(resolve, 300))
        const index = documents.value.findIndex(doc => doc.id === id)
        if (index !== -1) {
          documents.value[index].isActive = isActive
          documents.value[index].updatedAt = new Date().toISOString()
        }
        console.log(`‚úÖ Statut document KB modifi√© (mock): ${id} -> ${isActive ? 'actif' : 'inactif'}`)
        return { success: true, data: null }
      }
      
      const response = await $fetch(`/api/v1/knowledge-base/${id}/toggle`, {
        method: 'PATCH',
        baseURL: config.public.apiBaseUrl,
        headers: getAuthHeaders(),
        body: { isActive }
      }) as { success: boolean; data: { updatedAt: string } }

      if (response.success) {
        const index = documents.value.findIndex(doc => doc.id === id)
        if (index !== -1) {
          documents.value[index].isActive = isActive
          documents.value[index].updatedAt = response.data.updatedAt
        }
        console.log(`‚úÖ Statut document KB modifi√©: ${id} -> ${isActive ? 'actif' : 'inactif'}`)
        return { success: true, data: null }
      } else {
        throw new Error('R√©ponse API invalide')
      }

    } catch (err: any) {
      return handleApiError(err, 'Erreur lors de la modification du statut')
    } finally {
      saving.value = false
    }
  }

  // ‚úÖ UPLOAD D'UN FICHIER - CORRECTION TYPESCRIPT D√âFINITIVE
  const uploadFile = async (file: File, title?: string, tags?: string[]): Promise<ApiResponse<KnowledgeBaseDocument>> => {
    saving.value = true
    uploadProgress.value = 0
    error.value = null

    try {
      console.log('üì§ Upload fichier KB:', file.name)
      
      const shopId = authStore.userShopId || 'mock-shop'
      
      // ‚úÖ 1. Upload vers Supabase Storage
      uploadProgress.value = 20
      const uploadResult = await uploadFileToStorage(file, shopId)
      
      if (!uploadResult.success) {
        throw new Error(uploadResult.error || 'Erreur upload fichier')
      }
      
      uploadProgress.value = 60
      
      // ‚úÖ 2. Extraire le contenu du fichier (simul√©)
      await new Promise(resolve => setTimeout(resolve, 1000))
      const extractedContent = `Contenu extrait du fichier ${file.name}.\n\nCe fichier contient des informations importantes pour votre business. Le contenu a √©t√© analys√© et trait√© automatiquement par notre syst√®me d'IA pour √™tre utilis√© par votre Vendeur IA.`
      
      uploadProgress.value = 80
      
      // ‚úÖ 3. Cr√©er le document dans la base
      const documentData: CreateKnowledgeBaseData = {
        title: title || file.name,
        content: extractedContent,
        contentType: 'file',
        sourceFile: file.name,
        tags: tags || ['fichier', 'upload'],
        isActive: true,
        metadata: {
          fileSize: file.size,
          fileType: file.type,
          wordCount: extractedContent.split(' ').length,
          lastProcessed: new Date().toISOString(),
          storagePath: uploadResult.data?.path,
          originalFileName: file.name
        }
      }
      
      const createResult = await createDocument(documentData)
      
      uploadProgress.value = 100
      
      // ‚úÖ SOLUTION TYPESCRIPT D√âFINITIVE
      return createResult

    } catch (err: any) {
      return handleApiError(err, 'Erreur lors de l\'upload du fichier')
    } finally {
      saving.value = false
      uploadProgress.value = 0
    }
  }

  // ‚úÖ TRAITEMENT D'URL/SITE WEB - CORRECTION TYPESCRIPT D√âFINITIVE
  const processWebsite = async (url: string, title?: string, tags?: string[]): Promise<ApiResponse<KnowledgeBaseDocument>> => {
    saving.value = true
    error.value = null

    try {
      console.log('üåê Traitement URL/site web:', url)
      
      // ‚úÖ Simulation de traitement web
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      const extractedContent = `Contenu extrait automatiquement depuis ${url}.

INFORMATIONS PRINCIPALES:
- √Ä propos de l'entreprise
- Services et produits propos√©s
- Conditions g√©n√©rales de vente
- Politique de confidentialit√©
- Informations de contact

SERVICES DISPONIBLES:
- Service client premium
- Livraison rapide
- Garantie satisfaction
- Support technique

COORDONN√âES:
- Email: contact@example.com
- T√©l√©phone: 01 23 45 67 89
- Adresse: 123 Rue Example, Paris

Le contenu est mis √† jour automatiquement pour garantir des informations toujours actuelles.`

      const documentData: CreateKnowledgeBaseData = {
        title: title || `Contenu de ${new URL(url).hostname}`,
        content: extractedContent,
        contentType: 'website',
        sourceUrl: url,
        tags: tags || ['website', 'web', 'automatique'],
        isActive: true,
        metadata: {
          wordCount: extractedContent.split(' ').length,
          lastProcessed: new Date().toISOString()
        }
      }
      
      const createResult = await createDocument(documentData)
      
      // ‚úÖ SOLUTION TYPESCRIPT D√âFINITIVE
      return createResult

    } catch (err: any) {
      return handleApiError(err, 'Erreur lors du traitement du site web')
    } finally {
      saving.value = false
    }
  }

  // ‚úÖ RECHERCHER DANS LES DOCUMENTS
  const searchDocuments = (query: string) => {
    if (!query.trim()) return documents.value
    
    const searchTerm = query.toLowerCase()
    return documents.value.filter(doc => 
      doc.title.toLowerCase().includes(searchTerm) ||
      doc.content.toLowerCase().includes(searchTerm) ||
      doc.tags.some(tag => tag.toLowerCase().includes(searchTerm))
    )
  }

  // ‚úÖ OBTENIR LES DOCUMENTS LI√âS √Ä UN AGENT
  const getDocumentsForAgent = (agentId: string) => {
    return documents.value.filter(doc => 
      doc.isActive && doc.linkedAgents?.includes(agentId)
    )
  }

  // ‚úÖ OBTENIR UN DOCUMENT PAR ID
  const getDocument = (id: string): KnowledgeBaseDocument | null => {
    return documents.value.find(doc => doc.id === id) || null
  }

  // ‚úÖ LIER/D√âLIER UN DOCUMENT √Ä UN AGENT
  const linkToAgent = async (documentId: string, agentId: string, link: boolean = true): Promise<ApiResponse<null>> => {
    try {
      console.log(`üîó ${link ? 'Liaison' : 'D√©laison'} document KB ${documentId} vers agent ${agentId}`)
      
      const docIndex = documents.value.findIndex(doc => doc.id === documentId)
      if (docIndex !== -1) {
        const doc = documents.value[docIndex]
        const linkedAgents = doc.linkedAgents || []
        
        if (link && !linkedAgents.includes(agentId)) {
          linkedAgents.push(agentId)
        } else if (!link && linkedAgents.includes(agentId)) {
          const agentIndex = linkedAgents.indexOf(agentId)
          linkedAgents.splice(agentIndex, 1)
        }
        
        documents.value[docIndex].linkedAgents = linkedAgents
        documents.value[docIndex].updatedAt = new Date().toISOString()
      }
      
      console.log(`‚úÖ Document KB ${link ? 'li√©' : 'd√©li√©'} √†/de l'agent`)
      return { success: true, data: null }
      
    } catch (err: any) {
      return handleApiError(err, `Erreur lors de la ${link ? 'liaison' : 'd√©laison'}`)
    }
  }

  // ‚úÖ R√âINITIALISER L'ERREUR
  const clearError = () => {
    error.value = null
  }

  // ‚úÖ RETOURNER TOUTES LES M√âTHODES ET PROPRI√âT√âS
  return {
    // State
    documents: readonly(documents),
    loading: readonly(loading),
    saving: readonly(saving),
    error: readonly(error),
    uploadProgress: readonly(uploadProgress),

    // Computed
    activeDocuments,
    documentsByType,
    totalWordCount,

    // Actions
    fetchDocuments,
    createDocument,
    updateDocument,
    deleteDocument,
    toggleDocumentStatus,
    linkToAgent,
    uploadFile,
    processWebsite,

    // Helpers
    searchDocuments,
    getDocumentsForAgent,
    getDocument,
    clearError,
    
    // ‚úÖ NOUVEAU: M√©thodes de storage
    uploadFileToStorage,
    deleteFileFromStorage
  }
}