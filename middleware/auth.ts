// middleware/auth.ts - VERSION CORRIG√âE POUR √âVITER REDIRECTIONS INFINIES

import { useSupabase } from "~~/composables/useSupabase"
import { useAuthStore } from "~~/stores/auth"

export default defineNuxtRouteMiddleware(async (to, from) => {
  console.log('üîí [AUTH] Middleware auth: V√©rification pour route:', to.path)
  
  // ‚úÖ NE PAS EX√âCUTER C√îT√â SERVEUR
  if (process.server) {
    return
  }

  // ‚úÖ ROUTES PUBLIQUES - ACC√àS LIBRE TOTAL
  const publicRoutes = [
    '/login', 
    '/register', 
    '/auth/callback', 
    '/reset-password'
  ]
  
  const isPublicRoute = publicRoutes.some(route => to.path.startsWith(route))
  
  if (isPublicRoute) {
    console.log('‚úÖ [AUTH] Route publique:', to.path)
    return // ‚úÖ ACC√àS LIBRE TOTAL
  }

  // ‚úÖ ROUTES SEMI-PUBLIQUES
  const semiPublicRoutes = ['/onboarding']
  const isSemiPublicRoute = semiPublicRoutes.some(route => to.path.startsWith(route))

  // üîê V√âRIFICATION AUTHENTIFICATION POUR ROUTES PROT√âG√âES
  try {
    const authStore = useAuthStore()
    const supabase = useSupabase()
    
    // ‚úÖ V√âRIFIER SESSION SUPABASE
    const { data: { user }, error } = await supabase.auth.getUser()
    
    if (error || !user) {
      console.log('‚ùå [AUTH] Pas de session Supabase valide - redirection login')
      
      // ‚úÖ √âVITER BOUCLE INFINIE : ne pas rediriger si on vient d√©j√† de register
      if (from?.path === '/register') {
        console.log('‚ö†Ô∏è [AUTH] Vient de register, pas de redirection')
        return
      }
      
      authStore.clearAuth()
      return navigateTo('/login')
    }

    console.log('‚úÖ [AUTH] Session Supabase valide:', user.email)
    
    // ‚úÖ SYNCHRONISER STORE SI N√âCESSAIRE
    if (!authStore.isAuthenticated || authStore.user?.id !== user.id) {
      console.log('üîÑ [AUTH] Synchronisation store...')
      try {
        await authStore.restoreSession()
      } catch (syncError) {
        console.warn('‚ö†Ô∏è [AUTH] Erreur sync non bloquante:', syncError)
      }
    }

    // ‚úÖ POUR ONBOARDING - ACC√àS LIBRE SI CONNECT√â
    if (isSemiPublicRoute) {
      console.log('‚úÖ [AUTH] Acc√®s onboarding autoris√©')
      return
    }

    // ‚úÖ POUR AUTRES ROUTES PROT√âG√âES - ACC√àS AUTORIS√â
    console.log('‚úÖ [AUTH] Acc√®s autoris√© √†:', to.path)

  } catch (error) {
    console.error('‚ùå [AUTH] Erreur middleware:', error)
    // ‚úÖ EN CAS D'ERREUR - AUTORISER L'ACC√àS PAR D√âFAUT
    return
  }
})