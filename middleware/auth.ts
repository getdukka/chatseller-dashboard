// middleware/auth.ts - VERSION SIMPLIFI√âE ET ROBUSTE

import { useSupabase } from "~~/composables/useSupabase"
import { useAuthStore } from "~~/stores/auth"

export default defineNuxtRouteMiddleware(async (to, from) => {
  console.log('üîí [AUTH] Middleware auth: V√©rification pour route:', to.path)
  
  // ‚úÖ NE PAS EX√âCUTER C√îT√â SERVEUR
  if (process.server) {
    console.log('‚è≠Ô∏è [AUTH] C√¥t√© serveur, passage...')
    return
  }

  // ‚úÖ ROUTES PUBLIQUES - ACC√àS LIBRE SANS AUTHENTIFICATION
  const publicRoutes = [
    '/login', 
    '/register', 
    '/auth/callback',
    '/auth/reset-password',
    '/reset-password'
  ]
  
  // ‚úÖ ROUTES SEMI-PUBLIQUES - AVEC AUTHENTIFICATION
  const semiPublicRoutes = [
    '/onboarding' 
  ]
  
  const isPublicRoute = publicRoutes.some(route => to.path.startsWith(route))
  const isSemiPublicRoute = semiPublicRoutes.some(route => to.path.startsWith(route))
  
  // ‚úÖ LAISSER PASSER LES ROUTES CALLBACK COMPL√àTEMENT
  if (to.path.startsWith('/auth/callback')) {
    console.log('üîó [AUTH] Route callback - Passage libre total')
    return
  }
  
  // ‚úÖ LAISSER PASSER LES ROUTES PUBLIQUES
  if (isPublicRoute) {
    console.log('‚úÖ [AUTH] Route publique, acc√®s libre:', to.path)
    return
  }

  // üîê POUR TOUTES LES AUTRES ROUTES - V√âRIFICATION AUTHENTIFICATION
  console.log('üîê [AUTH] Route prot√©g√©e d√©tect√©e:', to.path)
  
  try {
    const authStore = useAuthStore()
    const supabase = useSupabase()
    
    // ‚úÖ √âTAPE 1 : V√âRIFIER SESSION SUPABASE
    const { data: { user }, error } = await supabase.auth.getUser()
    
    if (error || !user) {
      console.log('‚ùå [AUTH] Pas de session Supabase valide')
      authStore.clearAuth()
      return navigateTo('/login')
    }

    console.log('‚úÖ [AUTH] Session Supabase valide pour:', user.email)
    
    // ‚úÖ √âTAPE 2 : SYNCHRONISER STORE SI N√âCESSAIRE
    if (!authStore.isAuthenticated || authStore.user?.id !== user.id) {
      console.log('üîÑ [AUTH] Synchronisation store depuis session Supabase')
      try {
        await authStore.restoreSession()
        console.log('‚úÖ [AUTH] Store synchronis√©')
      } catch (storeError) {
        console.warn('‚ö†Ô∏è [AUTH] Erreur synchronisation store (non bloquante):', storeError)
        // Continue m√™me si le store a des probl√®mes
      }
    }

    // ‚úÖ √âTAPE 3 : GESTION INTELLIGENTE ONBOARDING (SIMPLIFI√âE)
    if (isSemiPublicRoute) {
      console.log('‚úÖ [AUTH] Route onboarding, acc√®s autoris√©')
      return
    }

    // ‚úÖ LOGIQUE ONBOARDING SIMPLIFI√âE ET PERMISSIVE
    const needsOnboarding = checkIfNeedsOnboarding(user, authStore.user)
    
    if (needsOnboarding) {
      console.log('üö® [AUTH] Redirection vers onboarding n√©cessaire')
      return navigateTo('/onboarding')
    }

    console.log('‚úÖ [AUTH] Acc√®s autoris√© √†:', to.path)

  } catch (error) {
    console.error('‚ùå [AUTH] Erreur critique:', error)
    
    // ‚úÖ EN CAS D'ERREUR, AUTORISER L'ACC√àS (PRINCIPE DE R√âSILIENCE)
    console.log('‚ö†Ô∏è [AUTH] Erreur critique, autorisation d\'acc√®s par d√©faut')
    return
  }
})

// ‚úÖ FONCTION SIMPLIFI√âE POUR V√âRIFIER LE BESOIN D'ONBOARDING
function checkIfNeedsOnboarding(supabaseUser: any, storeUser: any): boolean {
  // Si pas de confirmation email, onboarding requis
  if (!supabaseUser.email_confirmed_at) {
    console.log('üö® [AUTH] Email non confirm√©')
    return true
  }
  
  // Si le compte est tr√®s r√©cent (moins de 5 minutes) et pas de donn√©es, onboarding requis
  const accountAge = Date.now() - new Date(supabaseUser.created_at).getTime()
  const isVeryNew = accountAge < 5 * 60 * 1000 // 5 minutes
  
  if (isVeryNew && !storeUser?.shop?.name) {
    console.log('üö® [AUTH] Compte tr√®s r√©cent sans donn√©es')
    return true
  }
  
  // ‚úÖ DANS TOUS LES AUTRES CAS, PAS D'ONBOARDING REQUIS
  console.log('‚úÖ [AUTH] Onboarding non requis - Acc√®s autoris√©')
  return false
}