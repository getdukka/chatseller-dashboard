// middleware/auth.ts - VERSION CORRIG√âE AVEC MEILLEURE GESTION CALLBACK

import { useSupabase } from "~~/composables/useSupabase"
import { useAuthStore } from "~~/stores/auth"

export default defineNuxtRouteMiddleware(async (to, from) => {
  console.log('üîí [AUTH] Middleware auth: V√©rification pour route:', to.path, 'depuis:', from?.path)
  
  // ‚úÖ NE PAS EX√âCUTER C√îT√â SERVEUR
  if (process.server) {
    console.log('‚è≠Ô∏è [AUTH] C√¥t√© serveur, passage...')
    return
  }

  // ‚úÖ ROUTES PUBLIQUES - ACC√àS LIBRE SANS AUTHENTIFICATION
  const publicRoutes = [
    '/login', 
    '/register', 
    '/auth/callback',  
    '/reset-password'
  ]
  
  // ‚úÖ ROUTES SEMI-PUBLIQUES - ACC√àS LIBRE MAIS AVEC AUTHENTIFICATION REQUISE
  const semiPublicRoutes = [
    '/onboarding' 
  ]
  
  const isPublicRoute = publicRoutes.some(route => to.path.startsWith(route))
  const isSemiPublicRoute = semiPublicRoutes.some(route => to.path.startsWith(route))
  
  // ‚úÖ SI ROUTE CALLBACK - LAISSER PASSER COMPL√àTEMENT SANS V√âRIFICATION
  if (to.path.startsWith('/auth/callback')) {
    console.log('üîó [AUTH] Route callback d√©tect√©e - Passage libre pour traitement confirmation')
    return // ‚úÖ LAISSER PASSER SANS AUCUNE V√âRIFICATION
  }
  
  if (isPublicRoute) {
    console.log('‚úÖ [AUTH] Route publique, acc√®s libre:', to.path)
    
    // ‚úÖ MISE √Ä JOUR L√âG√àRE DU STORE SI N√âCESSAIRE (SUPABASE AUTH SEULEMENT)
    try {
      const authStore = useAuthStore()
      const supabase = useSupabase()
      
      const { data: { user } } = await supabase.auth.getUser()
      
      if (user && !authStore.isAuthenticated) {
        console.log('üîÑ [AUTH] Synchronisation silencieuse du store (auth seulement)')
        await authStore.restoreSession()
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è [AUTH] Erreur synchronisation (non bloquante):', error)
    }
    
    return // ‚úÖ LAISSER PASSER LIBREMENT
  }

  // üîê POUR TOUTES LES AUTRES ROUTES - V√âRIFICATION AUTHENTIFICATION OBLIGATOIRE
  console.log('üîê [AUTH] Route prot√©g√©e d√©tect√©e:', to.path, '- V√©rification authentification...')
  
  try {
    const authStore = useAuthStore()
    const supabase = useSupabase()
    
    // ‚úÖ √âTAPE 1 : V√âRIFIER SESSION SUPABASE - OBLIGATOIRE
    const { data: { user }, error } = await supabase.auth.getUser()
    
    if (error || !user) {
      console.log('‚ùå [AUTH] Pas de session Supabase valide pour route prot√©g√©e:', to.path)
      console.log('‚ùå [AUTH] Redirection vers /login')
      
      // ‚úÖ NETTOYER LE STORE
      if (authStore.isAuthenticated) {
        console.log('üßπ [AUTH] Nettoyage du store')
        authStore.clearAuth()
      }
      
      return navigateTo('/login')
    }

    // ‚úÖ √âTAPE 2 : SESSION SUPABASE VALIDE
    console.log('‚úÖ [AUTH] Session Supabase valide pour:', user.email)
    
    // ‚úÖ √âTAPE 3 : SYNCHRONISER STORE SI N√âCESSAIRE (VIA API)
    if (!authStore.isAuthenticated || authStore.user?.id !== user.id) {
      console.log('üîÑ [AUTH] Mise √† jour store depuis session Supabase (via API)')
      await authStore.restoreSession()
    }

    // ‚úÖ AM√âLIORATION: GESTION INTELLIGENTE DES RETOURS DE PAIEMENT
    const urlParams = new URLSearchParams(to.fullPath.split('?')[1] || '')
    const isPaymentReturn = urlParams.get('success') === 'true' || urlParams.get('cancelled') === 'true'
    
    if (isPaymentReturn && to.path === '/billing') {
      console.log('üí≥ [AUTH] Retour de paiement d√©tect√©, synchronisation forc√©e...')
      
      // ‚úÖ FORCER UNE SYNCHRONISATION COMPL√àTE DES DONN√âES
      setTimeout(async () => {
        try {
          await authStore.forceDataSync()
          console.log('‚úÖ [AUTH] Synchronisation forc√©e apr√®s paiement termin√©e')
        } catch (syncError) {
          console.warn('‚ö†Ô∏è [AUTH] Erreur synchronisation forc√©e:', syncError)
        }
      }, 1000) // D√©lai pour laisser le composant se monter
    }

    // ‚úÖ √âTAPE 4 : POUR LA ROUTE ONBOARDING - PAS DE V√âRIFICATION SUPPL√âMENTAIRE
    if (isSemiPublicRoute) {
      console.log('‚úÖ [AUTH] Route onboarding, acc√®s autoris√© (connect√©)')
      return
    }

    // üîç √âTAPE 5 : POUR LE DASHBOARD - V√âRIFICATION INTELLIGENTE DE L'ONBOARDING VIA API
    console.log('üîç [AUTH] V√©rification intelligente du statut onboarding via API pour:', to.path)
    
    try {
      // ‚úÖ UTILISER L'API POUR R√âCUP√âRER LES DONN√âES UTILISATEUR
      const api = useApi()
      const shopResponse = await api.shops.get(user.id)
      
      if (!shopResponse.success) {
        console.log('üÜï [AUTH] Shop inexistant, cr√©ation n√©cessaire...')
        
        // Si le shop n'existe pas, rediriger vers onboarding
        console.log('üöÄ [AUTH] Redirection vers onboarding (shop manquant)')
        return navigateTo('/onboarding')
      }

      const shopData = shopResponse.data
      console.log('üìä [AUTH] Donn√©es shop r√©cup√©r√©es via API:', {
        id: shopData.id,
        name: shopData.name,
        subscription_plan: shopData.subscription_plan,
        created_at: shopData.created_at
      })

      // üß† LOGIQUE INTELLIGENTE DE V√âRIFICATION ONBOARDING
      const hasCompletedOnboarding = shopData.onboarding_completed === true
      const hasShopInfo = !!(shopData.name && shopData.name !== `Shop de ${user.email?.split('@')[0]}`)
      const accountAge = shopData.created_at ? 
        (Date.now() - new Date(shopData.created_at).getTime()) / (1000 * 60 * 60 * 24) : 0 // Age en jours
      
      console.log('üß† [AUTH] Analyse intelligente onboarding:', {
        completed: hasCompletedOnboarding,
        hasShopInfo: hasShopInfo,
        accountAge: Math.round(accountAge),
        route: to.path,
        shopName: shopData.name
      })

      // ‚úÖ LOGIQUE INTELLIGENTE : Pas de redirection forc√©e pour les comptes existants
      if (!hasCompletedOnboarding) {
        
        // üîÑ SI L'UTILISATEUR A DES INFOS ET COMPTE > 1 JOUR = AUTO-COMPLETE ONBOARDING
        if (hasShopInfo && accountAge > 1) {
          console.log('üîÑ [AUTH] Compte existant avec infos d√©tect√©, auto-completion onboarding via API...')
          
          try {
            const updateResponse = await api.shops.update(user.id, {
              onboarding_completed: true,
              onboarding_completed_at: new Date().toISOString()
            })
            
            if (updateResponse.success) {
              console.log('‚úÖ [AUTH] Onboarding auto-compl√©t√© pour compte existant via API')
              return // ‚úÖ AUTORISER L'ACC√àS
            }
          } catch (error) {
            console.warn('‚ö†Ô∏è [AUTH] Erreur auto-completion onboarding, autorisation quand m√™me')
          }
          
          return // ‚úÖ AUTORISER L'ACC√àS M√äME SI L'UPDATE A √âCHOU√â
        }
        
        // üö® SEULEMENT REDIRIGER VERS ONBOARDING SI COMPTE R√âCENT SANS INFOS
        if (!hasShopInfo && accountAge <= 1) {
          console.log('üö® [AUTH] Compte r√©cent sans infos, redirection vers onboarding')
          return navigateTo('/onboarding')
        }
        
        // ‚úÖ POUR TOUS LES AUTRES CAS = ACC√àS AUTORIS√â
        console.log('‚úÖ [AUTH] Autorisation d\'acc√®s malgr√© onboarding non compl√©t√©')
      }

      // ‚úÖ ACC√àS AUTORIS√â - ONBOARDING COMPL√âT√â OU EXCEPTIONS
      console.log('‚úÖ [AUTH] Acc√®s autoris√© √†:', to.path)

    } catch (apiError) {
      console.warn('‚ö†Ô∏è [AUTH] Erreur API pour r√©cup√©ration donn√©es utilisateur:', apiError)
      
      // ‚úÖ EN CAS D'ERREUR API, AUTORISER L'ACC√àS PLUT√îT QUE BLOQUER
      console.log('‚ö†Ô∏è [AUTH] Erreur API, autorisation d\'acc√®s par d√©faut')
      return // ‚úÖ ACC√àS AUTORIS√â PAR D√âFAUT
    }

  } catch (error) {
    console.error('‚ùå [AUTH] Erreur critique lors de la v√©rification:', error)
    
    // üö® EN CAS D'ERREUR CRITIQUE, AUTORISER L'ACC√àS PLUT√îT QUE BLOQUER
    console.log('‚ö†Ô∏è [AUTH] Erreur critique, autorisation d\'acc√®s par d√©faut')
    return // ‚úÖ ACC√àS AUTORIS√â PAR D√âFAUT
  }
})