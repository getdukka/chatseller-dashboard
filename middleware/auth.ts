// middleware/auth.ts - VERSION CORRIG√âE SANS REDIRECTION FORC√âE ONBOARDING

import { useSupabase } from "~~/composables/useSupabase"
import { useAuthStore } from "~~/stores/auth"

export default defineNuxtRouteMiddleware(async (to, from) => {
  console.log('üîí [AUTH] Middleware auth: V√©rification pour route:', to.path, 'depuis:', from?.path)
  
  // ‚úÖ NE PAS EX√âCUTER C√îT√â SERVEUR
  if (process.server) {
    console.log('‚è≠Ô∏è [AUTH] C√¥t√© serveur, passage...')
    return
  }

  // ‚úÖ ROUTES PUBLIQUES - ACC√àS LIBRE SANS AUTHENTIFICATION
  const publicRoutes = [
    '/login', 
    '/register', 
    '/auth/callback', 
    '/reset-password'
  ]
  
  // ‚úÖ ROUTES SEMI-PUBLIQUES - ACC√àS LIBRE MAIS AVEC AUTHENTIFICATION REQUISE
  const semiPublicRoutes = [
    '/onboarding' // ‚úÖ Accessible SEULEMENT si connect√©
  ]
  
  const isPublicRoute = publicRoutes.some(route => to.path.startsWith(route))
  const isSemiPublicRoute = semiPublicRoutes.some(route => to.path.startsWith(route))
  
  if (isPublicRoute) {
    console.log('‚úÖ [AUTH] Route publique, acc√®s libre:', to.path)
    
    // ‚úÖ MISE √Ä JOUR L√âG√àRE DU STORE SI N√âCESSAIRE
    try {
      const authStore = useAuthStore()
      const supabase = useSupabase()
      
      const { data: { user } } = await supabase.auth.getUser()
      
      if (user && !authStore.isAuthenticated) {
        console.log('üîÑ [AUTH] Synchronisation silencieuse du store')
        await authStore.restoreSession()
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è [AUTH] Erreur synchronisation (non bloquante):', error)
    }
    
    return // ‚úÖ LAISSER PASSER LIBREMENT
  }

  // üîê POUR TOUTES LES AUTRES ROUTES - V√âRIFICATION AUTHENTIFICATION OBLIGATOIRE
  console.log('üîê [AUTH] Route prot√©g√©e d√©tect√©e:', to.path, '- V√©rification authentification...')
  
  try {
    const authStore = useAuthStore()
    const supabase = useSupabase()
    
    // ‚úÖ V√âRIFIER SESSION SUPABASE - OBLIGATOIRE
    const { data: { user }, error } = await supabase.auth.getUser()
    
    if (error || !user) {
      console.log('‚ùå [AUTH] Pas de session Supabase valide pour route prot√©g√©e:', to.path)
      console.log('‚ùå [AUTH] Redirection vers /login')
      
      // ‚úÖ NETTOYER LE STORE
      if (authStore.isAuthenticated) {
        console.log('üßπ [AUTH] Nettoyage du store')
        authStore.clearAuth()
      }
      
      return navigateTo('/login')
    }

    // ‚úÖ SESSION VALIDE
    console.log('‚úÖ [AUTH] Session Supabase valide pour:', user.email)
    
    // ‚úÖ SYNCHRONISER STORE SI N√âCESSAIRE
    if (!authStore.isAuthenticated || authStore.user?.id !== user.id) {
      console.log('üîÑ [AUTH] Mise √† jour store depuis session Supabase')
      await authStore.restoreSession()
    }

    // ‚úÖ POUR LA ROUTE ONBOARDING - PAS DE V√âRIFICATION SUPPL√âMENTAIRE
    if (isSemiPublicRoute) {
      console.log('‚úÖ [AUTH] Route onboarding, acc√®s autoris√© (connect√©)')
      return
    }

    // üîç POUR LE DASHBOARD ET PAGES PROT√âG√âES - V√âRIFICATION INTELLIGENTE DE L'ONBOARDING
    console.log('üîç [AUTH] V√©rification intelligente du statut onboarding pour:', to.path)
    
    const { data: userData, error: onboardingError } = await supabase
      .from('users')
      .select('onboarding_completed, company, first_name, last_name, email, created_at')
      .eq('id', user.id)
      .single()

    console.log('üìä [AUTH] Donn√©es utilisateur:', userData)

    // üõë GESTION DES ERREURS DB
    if (onboardingError) {
      console.error('‚ùå [AUTH] Erreur DB onboarding:', onboardingError.code, onboardingError.message)
      
      if (onboardingError.code === 'PGRST116') {
        console.log('üÜï [AUTH] Utilisateur inexistant en DB, cr√©ation et redirection vers onboarding...')
        
        const { error: insertError } = await supabase
          .from('users')
          .insert({
            id: user.id,
            email: user.email,
            first_name: user.user_metadata?.first_name || '',
            last_name: user.user_metadata?.last_name || '',
            onboarding_completed: false,
            created_at: new Date().toISOString()
          })
        
        if (!insertError) {
          console.log('‚úÖ [AUTH] Utilisateur cr√©√© en DB')
        }
        
        console.log('üöÄ [AUTH] Redirection vers onboarding (utilisateur cr√©√©)')
        return navigateTo('/onboarding')
      } else {
        console.warn('‚ö†Ô∏è [AUTH] Erreur DB non critique, autorisation d\'acc√®s')
        return // ‚úÖ AUTORISER L'ACC√àS EN CAS D'ERREUR DB
      }
    }

    // üß† LOGIQUE INTELLIGENTE DE V√âRIFICATION ONBOARDING
    const hasCompletedOnboarding = userData?.onboarding_completed === true
    const hasMinimalInfo = !!(userData?.company || userData?.first_name || userData?.last_name)
    const accountAge = userData?.created_at ? 
      (Date.now() - new Date(userData.created_at).getTime()) / (1000 * 60 * 60 * 24) : 0 // Age en jours
    
    console.log('üß† [AUTH] Analyse intelligente onboarding:', {
      completed: hasCompletedOnboarding,
      hasInfo: hasMinimalInfo,
      accountAge: Math.round(accountAge),
      route: to.path,
      company: userData?.company,
      firstName: userData?.first_name,
      lastName: userData?.last_name
    })

    // ‚úÖ LOGIQUE INTELLIGENTE : Pas de redirection forc√©e pour les comptes existants
    if (!hasCompletedOnboarding) {
      
      // üîÑ SI L'UTILISATEUR A DES INFOS ET COMPTE > 1 JOUR = AUTO-COMPLETE ONBOARDING
      if (hasMinimalInfo && accountAge > 1) {
        console.log('üîÑ [AUTH] Compte existant avec infos d√©tect√©, auto-completion onboarding...')
        
        try {
          const { error: updateError } = await supabase
            .from('users')
            .update({
              onboarding_completed: true,
              onboarding_completed_at: new Date().toISOString(),
              updated_at: new Date().toISOString()
            })
            .eq('id', user.id)
          
          if (!updateError) {
            console.log('‚úÖ [AUTH] Onboarding auto-compl√©t√© pour compte existant')
            return // ‚úÖ AUTORISER L'ACC√àS
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è [AUTH] Erreur auto-completion onboarding, autorisation quand m√™me')
        }
        
        return // ‚úÖ AUTORISER L'ACC√àS M√äME SI L'UPDATE A √âCHOU√â
      }
      
      // üö® SEULEMENT REDIRIGER VERS ONBOARDING SI COMPTE R√âCENT SANS INFOS
      if (!hasMinimalInfo && accountAge <= 1) {
        console.log('üö® [AUTH] Compte r√©cent sans infos, redirection vers onboarding')
        return navigateTo('/onboarding')
      }
      
      // ‚úÖ POUR TOUS LES AUTRES CAS = ACC√àS AUTORIS√â
      console.log('‚úÖ [AUTH] Autorisation d\'acc√®s malgr√© onboarding non compl√©t√©')
    }

    // ‚úÖ ACC√àS AUTORIS√â - ONBOARDING COMPL√âT√â OU EXCEPTIONS
    console.log('‚úÖ [AUTH] Acc√®s autoris√© √†:', to.path)

  } catch (error) {
    console.error('‚ùå [AUTH] Erreur critique lors de la v√©rification:', error)
    
    // üö® EN CAS D'ERREUR CRITIQUE, AUTORISER L'ACC√àS PLUT√îT QUE BLOQUER
    console.log('‚ö†Ô∏è [AUTH] Erreur critique, autorisation d\'acc√®s par d√©faut')
    return // ‚úÖ ACC√àS AUTORIS√â PAR D√âFAUT
  }
})