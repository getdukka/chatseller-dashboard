// middleware/auth.ts - VERSION OPTIMIS√âE POUR √âVITER CONFLITS

import { useSupabase } from "~~/composables/useSupabase"
import { useAuthStore } from "~~/stores/auth"

export default defineNuxtRouteMiddleware(async (to, from) => {
  console.log('üîí Middleware auth: V√©rification pour route:', to.path)
  
  // Ne pas ex√©cuter c√¥t√© serveur pour √©viter les probl√®mes
  if (process.server) {
    console.log('‚è≠Ô∏è Middleware auth: C√¥t√© serveur, passage...')
    return
  }

  // ‚úÖ NOUVEAU: Ignorer les routes publiques et de callback
  const publicRoutes = ['/login', '/register', '/auth/callback', '/reset-password', '/onboarding']
  const isPublicRoute = publicRoutes.some(route => to.path.startsWith(route))
  
  if (isPublicRoute) {
    console.log('‚úÖ Middleware auth: Route publique, v√©rification simple...')
    
    // Pour les routes publiques, juste s'assurer que le store est √† jour si connect√©
    try {
      const authStore = useAuthStore()
      const supabase = useSupabase()
      
      const { data: { user } } = await supabase.auth.getUser()
      
      if (user && !authStore.isAuthenticated) {
        console.log('üîÑ Middleware auth: Mise √† jour silencieuse du store')
        await authStore.restoreSession()
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Middleware auth: Erreur mise √† jour silencieuse:', error)
    }
    
    return // Laisser passer
  }

  // ‚úÖ POUR LES ROUTES PROT√âG√âES UNIQUEMENT
  try {
    const authStore = useAuthStore()
    const supabase = useSupabase()
    
    // V√©rifier la session Supabase
    const { data: { user }, error } = await supabase.auth.getUser()
    
    if (error || !user) {
      console.log('‚ùå Middleware auth: Pas de session Supabase valide')
      
      // Nettoyer le store si n√©cessaire
      if (authStore.isAuthenticated) {
        authStore.clearAuth()
      }
      
      // Sauvegarder la route de destination pour redirection apr√®s login
      const redirect = to.path !== '/login' ? to.fullPath : '/'
      
      return navigateTo({
        path: '/login',
        query: { redirect }
      })
    }

    // ‚úÖ SESSION SUPABASE VALIDE
    console.log('‚úÖ Middleware auth: Session Supabase valide pour:', user.email)
    
    // Mettre √† jour le store si n√©cessaire
    if (!authStore.isAuthenticated) {
      console.log('üîÑ Middleware auth: Mise √† jour du store depuis Supabase')
      await authStore.restoreSession()
    }

    console.log('‚úÖ Middleware auth: Acc√®s autoris√©')
  } catch (error) {
    console.error('‚ùå Middleware auth: Erreur:', error)
    // En cas d'erreur, rediriger vers login pour s√©curit√©
    return navigateTo('/login')
  }
})